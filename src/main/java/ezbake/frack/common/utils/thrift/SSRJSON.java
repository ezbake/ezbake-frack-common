/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.frack.common.utils.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This object encapsulates all of the required information for the SSR pipeline to perform a free text index
 * on incoming data. The SSR object is a search result that provides metadata and context for a client or
 * end user that is searching for terms. The JSON string is a representation of the incoming document
 * which is placed into the free text index as well as a view in the warehouse.
 */
public class SSRJSON implements org.apache.thrift.TBase<SSRJSON, SSRJSON._Fields>, java.io.Serializable, Cloneable, Comparable<SSRJSON> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SSRJSON");

  private static final org.apache.thrift.protocol.TField SSR_FIELD_DESC = new org.apache.thrift.protocol.TField("ssr", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField JSON_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonString", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SSRJSONStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SSRJSONTupleSchemeFactory());
  }

  /**
   * The Standard Search Result object which contains metadata and faceting information about an indexed object.
   */
  public ezbake.base.thrift.SSR ssr; // required
  /**
   * A JSON representation of the incoming document. This is flexible and depends on what fields the end user may be
   * interested in capturing in a free text search. This json string will also be placed into the warehouse under a
   * view so that the end user can view the document in a readable form if necessary.
   */
  public String jsonString; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The Standard Search Result object which contains metadata and faceting information about an indexed object.
     */
    SSR((short)1, "ssr"),
    /**
     * A JSON representation of the incoming document. This is flexible and depends on what fields the end user may be
     * interested in capturing in a free text search. This json string will also be placed into the warehouse under a
     * view so that the end user can view the document in a readable form if necessary.
     */
    JSON_STRING((short)2, "jsonString");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SSR
          return SSR;
        case 2: // JSON_STRING
          return JSON_STRING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SSR, new org.apache.thrift.meta_data.FieldMetaData("ssr", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.SSR.class)));
    tmpMap.put(_Fields.JSON_STRING, new org.apache.thrift.meta_data.FieldMetaData("jsonString", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SSRJSON.class, metaDataMap);
  }

  public SSRJSON() {
  }

  public SSRJSON(
    ezbake.base.thrift.SSR ssr,
    String jsonString)
  {
    this();
    this.ssr = ssr;
    this.jsonString = jsonString;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SSRJSON(SSRJSON other) {
    if (other.isSetSsr()) {
      this.ssr = new ezbake.base.thrift.SSR(other.ssr);
    }
    if (other.isSetJsonString()) {
      this.jsonString = other.jsonString;
    }
  }

  public SSRJSON deepCopy() {
    return new SSRJSON(this);
  }

  @Override
  public void clear() {
    this.ssr = null;
    this.jsonString = null;
  }

  /**
   * The Standard Search Result object which contains metadata and faceting information about an indexed object.
   */
  public ezbake.base.thrift.SSR getSsr() {
    return this.ssr;
  }

  /**
   * The Standard Search Result object which contains metadata and faceting information about an indexed object.
   */
  public SSRJSON setSsr(ezbake.base.thrift.SSR ssr) {
    this.ssr = ssr;
    return this;
  }

  public void unsetSsr() {
    this.ssr = null;
  }

  /** Returns true if field ssr is set (has been assigned a value) and false otherwise */
  public boolean isSetSsr() {
    return this.ssr != null;
  }

  public void setSsrIsSet(boolean value) {
    if (!value) {
      this.ssr = null;
    }
  }

  /**
   * A JSON representation of the incoming document. This is flexible and depends on what fields the end user may be
   * interested in capturing in a free text search. This json string will also be placed into the warehouse under a
   * view so that the end user can view the document in a readable form if necessary.
   */
  public String getJsonString() {
    return this.jsonString;
  }

  /**
   * A JSON representation of the incoming document. This is flexible and depends on what fields the end user may be
   * interested in capturing in a free text search. This json string will also be placed into the warehouse under a
   * view so that the end user can view the document in a readable form if necessary.
   */
  public SSRJSON setJsonString(String jsonString) {
    this.jsonString = jsonString;
    return this;
  }

  public void unsetJsonString() {
    this.jsonString = null;
  }

  /** Returns true if field jsonString is set (has been assigned a value) and false otherwise */
  public boolean isSetJsonString() {
    return this.jsonString != null;
  }

  public void setJsonStringIsSet(boolean value) {
    if (!value) {
      this.jsonString = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SSR:
      if (value == null) {
        unsetSsr();
      } else {
        setSsr((ezbake.base.thrift.SSR)value);
      }
      break;

    case JSON_STRING:
      if (value == null) {
        unsetJsonString();
      } else {
        setJsonString((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SSR:
      return getSsr();

    case JSON_STRING:
      return getJsonString();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SSR:
      return isSetSsr();
    case JSON_STRING:
      return isSetJsonString();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SSRJSON)
      return this.equals((SSRJSON)that);
    return false;
  }

  public boolean equals(SSRJSON that) {
    if (that == null)
      return false;

    boolean this_present_ssr = true && this.isSetSsr();
    boolean that_present_ssr = true && that.isSetSsr();
    if (this_present_ssr || that_present_ssr) {
      if (!(this_present_ssr && that_present_ssr))
        return false;
      if (!this.ssr.equals(that.ssr))
        return false;
    }

    boolean this_present_jsonString = true && this.isSetJsonString();
    boolean that_present_jsonString = true && that.isSetJsonString();
    if (this_present_jsonString || that_present_jsonString) {
      if (!(this_present_jsonString && that_present_jsonString))
        return false;
      if (!this.jsonString.equals(that.jsonString))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SSRJSON other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSsr()).compareTo(other.isSetSsr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSsr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ssr, other.ssr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJsonString()).compareTo(other.isSetJsonString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJsonString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonString, other.jsonString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SSRJSON(");
    boolean first = true;

    sb.append("ssr:");
    if (this.ssr == null) {
      sb.append("null");
    } else {
      sb.append(this.ssr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jsonString:");
    if (this.jsonString == null) {
      sb.append("null");
    } else {
      sb.append(this.jsonString);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (ssr == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ssr' was not present! Struct: " + toString());
    }
    if (jsonString == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jsonString' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (ssr != null) {
      ssr.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SSRJSONStandardSchemeFactory implements SchemeFactory {
    public SSRJSONStandardScheme getScheme() {
      return new SSRJSONStandardScheme();
    }
  }

  private static class SSRJSONStandardScheme extends StandardScheme<SSRJSON> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SSRJSON struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SSR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ssr = new ezbake.base.thrift.SSR();
              struct.ssr.read(iprot);
              struct.setSsrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // JSON_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jsonString = iprot.readString();
              struct.setJsonStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SSRJSON struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ssr != null) {
        oprot.writeFieldBegin(SSR_FIELD_DESC);
        struct.ssr.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.jsonString != null) {
        oprot.writeFieldBegin(JSON_STRING_FIELD_DESC);
        oprot.writeString(struct.jsonString);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SSRJSONTupleSchemeFactory implements SchemeFactory {
    public SSRJSONTupleScheme getScheme() {
      return new SSRJSONTupleScheme();
    }
  }

  private static class SSRJSONTupleScheme extends TupleScheme<SSRJSON> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SSRJSON struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.ssr.write(oprot);
      oprot.writeString(struct.jsonString);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SSRJSON struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.ssr = new ezbake.base.thrift.SSR();
      struct.ssr.read(iprot);
      struct.setSsrIsSet(true);
      struct.jsonString = iprot.readString();
      struct.setJsonStringIsSet(true);
    }
  }

}

